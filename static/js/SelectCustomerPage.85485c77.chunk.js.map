{"version":3,"file":"static/js/SelectCustomerPage.85485c77.chunk.js","mappings":"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","sources":["forms/CustomerForm.jsx","utils/inverseColor.js","modules/CustomCrudModule/DataTable.jsx","modules/CustomCrudModule/CrudDataTable.jsx","modules/CustomCrudModule/index.jsx","pages/SelectCustomer.jsx"],"sourcesContent":["import React from \"react\";\nimport { Button, Form, Input } from \"antd\";\n\nexport default function CustomerForm({ isUpdateForm = false }) {\n  return (\n    <>\n      <Form.Item\n        label=\"company Name\"\n        name=\"company\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your company name!\",\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Surname\"\n        name=\"surname\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your surname!\",\n          },\n        ]}\n        style={{\n          display: \"inline-block\",\n          width: \"calc(50%)\",\n          paddingRight: \"5px\",\n        }}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Name\"\n        name=\"name\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your manager name!\",\n          },\n        ]}\n        style={{\n          display: \"inline-block\",\n          width: \"calc(50%)\",\n          paddingLeft: \"5px\",\n        }}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"phone\"\n        label=\"Phone\"\n        rules={[\n          {\n            required: true,\n            message: \"Please input your phone!\",\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: \"email\",\n            message: \"The input is not valid E-mail!\",\n          },\n          {\n            required: true,\n            message: \"Please input your E-mail!\",\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n    </>\n  );\n}\n","export default function inverseColor(hex) {\n  if (hex.indexOf(\"#\") === 0) {\n    hex = hex.slice(1);\n  }\n  // convert 3-digit hex to 6-digits.\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  if (hex.length !== 6) {\n    throw new Error(\"Invalid HEX color.\");\n  }\n  var r = parseInt(hex.slice(0, 2), 16),\n    g = parseInt(hex.slice(2, 4), 16),\n    b = parseInt(hex.slice(4, 6), 16);\n\n  return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? \"#000000\" : \"#FFFFFF\";\n}\n","import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { Dropdown, Button, PageHeader, Table, Input } from \"antd\";\n\nimport { EllipsisOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { selectListItems } from \"@/redux/crud/selectors\";\n\nimport uniqueId from \"@/utils/uinqueId\";\nimport inverseColor from \"@/utils/inverseColor\";\n\nexport default function DataTable({ config, DropDownRowMenu, AddNewItem }) {\n  const inputColorRef = useRef(null);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [tableItemsList, setTableItemsList] = useState([]);\n  const [coloredRow, setColoredRow] = useState({});\n\n  const openColorBox = () => {\n    inputColorRef.current.click();\n  };\n  const handelColorChange = (e) => {\n    const tmpObj = {};\n    const tmpColoredRows = selectedRowKeys.map((x) => {\n      tmpObj[x] = e.target.value;\n    });\n\n    setColoredRow({ ...coloredRow, ...tmpObj });\n    setSelectedRowKeys([]);\n  };\n  function MakeNewColor() {\n    return (\n      <div style={{ position: \"relative\", display: \"inline-block\" }}>\n        <Button onClick={openColorBox}>Make new Color</Button>\n        <input\n          type=\"color\"\n          ref={inputColorRef}\n          onChange={handelColorChange}\n          style={{\n            opacity: 0,\n            position: \"absolute\",\n            left: 0,\n            top: \"10px\",\n            width: \"100%\",\n          }}\n        />\n      </div>\n    );\n  }\n  let { entity, dataTableColumns, dataTableTitle } = config;\n  const newDataTableColumns = dataTableColumns.map((obj) => ({\n    ...obj,\n    render: (text, row) => {\n      return {\n        props: {\n          style: {\n            background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\n            color: coloredRow[row._id] ? inverseColor(coloredRow[row._id]) : \"\",\n          },\n        },\n        children: text,\n      };\n    },\n  }));\n  dataTableColumns = [\n    ...newDataTableColumns,\n    {\n      title: \"\",\n      render: (row) => {\n        return {\n          props: {\n            style: {\n              background: coloredRow[row._id] ? coloredRow[row._id] : \"\",\n              color: coloredRow[row._id]\n                ? inverseColor(coloredRow[row._id])\n                : \"\",\n            },\n          },\n          children: (\n            <Dropdown overlay={DropDownRowMenu({ row })} trigger={[\"click\"]}>\n              <EllipsisOutlined\n                style={{ cursor: \"pointer\", fontSize: \"24px\" }}\n              />\n            </Dropdown>\n          ),\n        };\n      },\n    },\n  ];\n\n  const { result: listResult, isLoading: listIsLoading } =\n    useSelector(selectListItems);\n\n  const { pagination, items } = listResult;\n\n  const dispatch = useDispatch();\n\n  const handelDataTableLoad = useCallback((pagination) => {\n    dispatch(crud.list(entity, pagination.current));\n  }, []);\n\n  useEffect(() => {\n    dispatch(crud.list(entity));\n  }, []);\n\n  useEffect(() => {\n    const listIds = items.map((x) => x._id);\n    setTableItemsList(listIds);\n  }, [items]);\n\n  const [firstRow, setFirstRow] = useState();\n\n  const [onSelect, setSelect] = useState(false);\n  const onClickRow = (record, rowIndex) => {\n    return {\n      onClick: () => {\n        // const exist = selectedRowKeys.includes(record._id);\n        // if (exist) {\n        //   let filtered = selectedRowKeys.filter(function (value) {\n        //     return value != record._id;\n        //   });\n        //   setSelectedRowKeys(filtered);\n        // } else {\n        //   setSelectedRowKeys([...selectedRowKeys, record._id]);\n        // }\n      },\n      onMouseDown: () => {\n        setFirstRow(rowIndex);\n        setSelectedRowKeys([record._id]);\n        setSelect(true);\n      },\n      onMouseEnter: () => {\n        if (onSelect) {\n          const selectedRange = tableItemsList.slice(firstRow, rowIndex + 1);\n          setSelectedRowKeys(selectedRange);\n        }\n      },\n      onMouseUp: () => {\n        setSelect(false);\n      },\n    };\n  };\n\n  const handelColorRow = (checked, record, index, originNode) => {\n    return {\n      props: {\n        style: {\n          background: coloredRow[record._id] ? coloredRow[record._id] : \"\",\n        },\n      },\n      // children: originNode,\n    };\n  };\n\n  const onSelectChange = (selectedKeys, selectedRows) => {\n    setSelectedRowKeys(selectedKeys);\n    console.log(\"selectedRowKeys changed: \", selectedRowKeys);\n  };\n\n  const rowSelection = {\n    selectedRowKeys,\n    onChange: onSelectChange,\n    hideSelectAll: true,\n    columnWidth: 0,\n\n    renderCell: handelColorRow,\n    selectedRowKeys: selectedRowKeys,\n  };\n\n  return (\n    <>\n      <PageHeader\n        onBack={() => window.history.back()}\n        title={dataTableTitle}\n        ghost={false}\n        extra={[\n          <MakeNewColor key={`${uniqueId()}`} config={config} />,\n          <Button onClick={handelDataTableLoad} key={`${uniqueId()}`}>\n            Refresh\n          </Button>,\n          <AddNewItem key={`${uniqueId()}`} config={config} />,\n        ]}\n        style={{\n          padding: \"20px 0px\",\n        }}\n      ></PageHeader>\n      <Table\n        columns={dataTableColumns}\n        rowKey={(item) => item._id}\n        rowSelection={rowSelection}\n        onRow={onClickRow}\n        ellipsis={true}\n        // rowClassName={setRowClassName}\n        size={\"small\"}\n        dataSource={items}\n        pagination={pagination}\n        loading={listIsLoading}\n        onChange={handelDataTableLoad}\n      />\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { Button, Menu } from \"antd\";\nimport { EyeOutlined, EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { selectItemById } from \"@/redux/crud/selectors\";\nimport { useCrudContext } from \"@/context/crud\";\nimport uniqueId from \"@/utils/uinqueId\";\nimport DataTable from \"./DataTable\";\n\nfunction AddNewItem({ config }) {\n  const { crudContextAction } = useCrudContext();\n  const { collapsedBox, panel } = crudContextAction;\n  const { ADD_NEW_ENTITY } = config;\n  const handelClick = () => {\n    panel.open();\n    collapsedBox.close();\n  };\n\n  return (\n    <Button onClick={handelClick} type=\"primary\">\n      {ADD_NEW_ENTITY}\n    </Button>\n  );\n}\nfunction DropDownRowMenu({ row }) {\n  const dispatch = useDispatch();\n  const { crudContextAction } = useCrudContext();\n  const { panel, collapsedBox, modal, readBox, editBox } = crudContextAction;\n  const item = useSelector(selectItemById(row._id));\n  const Show = () => {\n    dispatch(crud.currentItem(item));\n    panel.open();\n    collapsedBox.open();\n    readBox.open();\n  };\n  function Edit() {\n    dispatch(crud.currentAction(\"update\", item));\n    editBox.open();\n    panel.open();\n    collapsedBox.open();\n  }\n  function Delete() {\n    dispatch(crud.currentAction(\"delete\", item));\n    modal.open();\n  }\n  return (\n    <Menu style={{ width: 130 }}>\n      <Menu.Item key={`${uniqueId()}`} icon={<EyeOutlined />} onClick={Show}>\n        Show\n      </Menu.Item>\n      <Menu.Item key={`${uniqueId()}`} icon={<EditOutlined />} onClick={Edit}>\n        Edit\n      </Menu.Item>\n      <Menu.Item\n        key={`${uniqueId()}`}\n        icon={<DeleteOutlined />}\n        onClick={Delete}\n      >\n        Delete\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default function CrudDataTable({ config }) {\n  return (\n    <DataTable\n      config={config}\n      DropDownRowMenu={DropDownRowMenu}\n      AddNewItem={AddNewItem}\n    />\n  );\n}\n","import React, { useLayoutEffect } from \"react\";\nimport { Row, Col, Button } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\n\nimport CreateForm from \"@/components/CreateForm\";\nimport UpdateForm from \"@/components/UpdateForm\";\nimport DeleteModal from \"@/components/DeleteModal\";\nimport ReadItem from \"@/components/ReadItem\";\nimport SearchItem from \"@/components/SearchItem\";\n\nimport { useDispatch } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { useCrudContext } from \"@/context/crud\";\n\nimport { CrudLayout } from \"@/layout\";\n\nimport CrudDataTable from \"./CrudDataTable\";\n\nfunction SidePanelTopContent({ config, formElements }) {\n  return (\n    <>\n      <ReadItem config={config} />\n      <UpdateForm config={config} formElements={formElements} />\n    </>\n  );\n}\n\nfunction FixHeaderPanel({ config }) {\n  const { crudContextAction } = useCrudContext();\n  const { collapsedBox } = crudContextAction;\n\n  const addNewItem = () => {\n    collapsedBox.close();\n  };\n  return (\n    <div className=\"box\">\n      <Row gutter={12}>\n        <Col className=\"gutter-row\" span={21}>\n          <h1 style={{ fontSize: 20, marginBottom: 20 }}>\n            {config.panelTitle}\n          </h1>\n        </Col>\n      </Row>\n      <Row gutter={8}>\n        <Col className=\"gutter-row\" span={21}>\n          <SearchItem config={config} />\n        </Col>\n        <Col className=\"gutter-row\" span={3}>\n          <Button\n            onClick={addNewItem}\n            block={true}\n            icon={<PlusOutlined />}\n          ></Button>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default function CustomCrudModule({ config, createForm, updateForm }) {\n  const dispatch = useDispatch();\n\n  useLayoutEffect(() => {\n    dispatch(crud.resetState());\n  }, []);\n\n  return (\n    <CrudLayout\n      config={config}\n      fixHeaderPanel={<FixHeaderPanel config={config} />}\n      sidePanelBottomContent={\n        <CreateForm config={config} formElements={createForm} />\n      }\n      sidePanelTopContent={\n        <SidePanelTopContent config={config} formElements={updateForm} />\n      }\n    >\n      <CrudDataTable config={config} />\n      <DeleteModal config={config} />\n    </CrudLayout>\n  );\n}\n","import React from \"react\";\n\nimport CustomCrudModule from \"@/modules/CustomCrudModule\";\nimport CustomerForm from \"@/forms/CustomerForm\";\n\nfunction SelectCustomer() {\n  const entity = \"client\";\n  const searchConfig = {\n    displayLabels: [\"company\", \"surname\", \"name\"],\n    searchFields: \"company,surname,name\",\n    outputValue: \"_id\",\n  };\n\n  const panelTitle = \"SelectCustomer Panel\";\n  const dataTableTitle = \"Customers Lists\";\n  const entityDisplayLabels = [\"company\"];\n\n  const readColumns = [\n    {\n      title: \"Company\",\n      dataIndex: \"company\",\n    },\n    {\n      title: \"Manager Surname\",\n      dataIndex: \"surname\",\n    },\n    {\n      title: \"Manager Name\",\n      dataIndex: \"name\",\n    },\n    {\n      title: \"Email\",\n      dataIndex: \"email\",\n    },\n    {\n      title: \"Phone\",\n      dataIndex: \"phone\",\n    },\n  ];\n  const dataTableColumns = [\n    {\n      title: \"Company\",\n      dataIndex: \"company\",\n    },\n    {\n      title: \"Manager Surname\",\n      dataIndex: \"surname\",\n    },\n    {\n      title: \"Manager Name\",\n      dataIndex: \"name\",\n    },\n    {\n      title: \"Email\",\n      dataIndex: \"email\",\n    },\n  ];\n\n  const ADD_NEW_ENTITY = \"Add new customer\";\n  const DATATABLE_TITLE = \"customers List\";\n  const ENTITY_NAME = \"customer\";\n  const CREATE_ENTITY = \"Create customer\";\n  const UPDATE_ENTITY = \"Update customer\";\n  const config = {\n    entity,\n    panelTitle,\n    dataTableTitle,\n    ENTITY_NAME,\n    CREATE_ENTITY,\n    ADD_NEW_ENTITY,\n    UPDATE_ENTITY,\n    DATATABLE_TITLE,\n    readColumns,\n    dataTableColumns,\n    searchConfig,\n    entityDisplayLabels,\n  };\n  return (\n    <CustomCrudModule\n      createForm={<CustomerForm />}\n      updateForm={<CustomerForm isUpdateForm={true} />}\n      config={config}\n    />\n  );\n}\n\nexport default SelectCustomer;\n"],"names":["CustomerForm","isUpdateForm","label","name","rules","required","message","style","display","width","paddingRight","paddingLeft","type","inverseColor","hex","indexOf","slice","length","Error","parseInt","DataTable","config","DropDownRowMenu","AddNewItem","inputColorRef","useRef","useState","selectedRowKeys","setSelectedRowKeys","tableItemsList","setTableItemsList","coloredRow","setColoredRow","openColorBox","current","click","handelColorChange","e","tmpObj","map","x","target","value","MakeNewColor","position","onClick","ref","onChange","opacity","left","top","entity","dataTableColumns","dataTableTitle","newDataTableColumns","obj","render","text","row","props","background","_id","color","children","title","overlay","trigger","EllipsisOutlined","cursor","fontSize","useSelector","selectListItems","listResult","result","listIsLoading","isLoading","pagination","items","dispatch","useDispatch","handelDataTableLoad","useCallback","crud","useEffect","listIds","firstRow","setFirstRow","onSelect","setSelect","rowSelection","selectedKeys","selectedRows","console","log","hideSelectAll","columnWidth","renderCell","checked","record","index","originNode","onBack","window","history","back","ghost","extra","uniqueId","padding","columns","rowKey","item","onRow","rowIndex","onMouseDown","onMouseEnter","selectedRange","onMouseUp","ellipsis","size","dataSource","loading","crudContextAction","useCrudContext","collapsedBox","panel","ADD_NEW_ENTITY","open","close","modal","readBox","editBox","selectItemById","icon","EyeOutlined","EditOutlined","DeleteOutlined","CrudDataTable","SidePanelTopContent","formElements","ReadItem","UpdateForm","FixHeaderPanel","className","gutter","span","marginBottom","panelTitle","SearchItem","block","PlusOutlined","CustomCrudModule","createForm","updateForm","useLayoutEffect","fixHeaderPanel","sidePanelBottomContent","CreateForm","sidePanelTopContent","DeleteModal","ENTITY_NAME","CREATE_ENTITY","UPDATE_ENTITY","DATATABLE_TITLE","readColumns","dataIndex","searchConfig","displayLabels","searchFields","outputValue","entityDisplayLabels"],"sourceRoot":""}