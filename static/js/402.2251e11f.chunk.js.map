{"version":3,"file":"static/js/402.2251e11f.chunk.js","mappings":"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","sources":["components/CreateForm/index.jsx","components/DeleteModal/index.jsx","components/Loading/index.jsx","components/ReadItem/index.jsx","components/SearchItem/index.jsx","components/UpdateForm/index.jsx","redux/crud/actions.js","redux/crud/selectors.js","utils/helpers.js"],"sourcesContent":["import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { useCrudContext } from \"@/context/crud\";\nimport { selectCreatedItem } from \"@/redux/crud/selectors\";\n\nimport { Button, Form } from \"antd\";\nimport Loading from \"@/components/Loading\";\n\nexport default function CreateForm({ config, formElements }) {\n  let { entity } = config;\n  const dispatch = useDispatch();\n  const { isLoading, isSuccess } = useSelector(selectCreatedItem);\n  const { crudContextAction } = useCrudContext();\n  const { panel, collapsedBox, readBox } = crudContextAction;\n  const [form] = Form.useForm();\n  const onSubmit = (fieldsValue) => {\n    if (fieldsValue) {\n      if (fieldsValue.birthday) {\n        fieldsValue = {\n          ...fieldsValue,\n          birthday: fieldsValue[\"birthday\"].format(\"DD/MM/YYYY\"),\n        };\n      }\n      if (fieldsValue.date) {\n        fieldsValue = {\n          ...fieldsValue,\n          date: fieldsValue[\"date\"].format(\"DD/MM/YYYY\"),\n        };\n      }\n    }\n\n    dispatch(crud.create(entity, fieldsValue));\n  };\n\n  useEffect(() => {\n    if (isSuccess) {\n      readBox.open();\n      collapsedBox.open();\n      panel.open();\n      form.resetFields();\n      dispatch(crud.resetAction(\"create\"));\n      dispatch(crud.list(entity));\n    }\n  }, [isSuccess]);\n\n  return (\n    <Loading isLoading={isLoading}>\n      <Form form={form} layout=\"vertical\" onFinish={onSubmit}>\n        {formElements}\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </Loading>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Modal } from \"antd\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { useCrudContext } from \"@/context/crud\";\nimport { selectDeletedItem } from \"@/redux/crud/selectors\";\nimport { valueByString } from \"@/utils/helpers\";\n\nexport default function DeleteModal({ config }) {\n  let {\n    entity,\n    entityDisplayLabels,\n    deleteMessage = \"Do you want delete : \",\n    modalTitle = \"Remove Item\",\n  } = config;\n  const dispatch = useDispatch();\n  const { current, isLoading, isSuccess } = useSelector(selectDeletedItem);\n  const { state, crudContextAction } = useCrudContext();\n  const { isModalOpen } = state;\n  const { modal } = crudContextAction;\n  const [displayItem, setDisplayItem] = useState(\"\");\n\n  useEffect(() => {\n    if (isSuccess) {\n      modal.close();\n      dispatch(crud.list(entity));\n      dispatch(crud.resetAction(entity));\n    }\n    if (current) {\n      let labels = entityDisplayLabels\n        .map((x) => valueByString(current, x))\n        .join(\" \");\n\n      setDisplayItem(labels);\n    }\n  }, [isSuccess, current]);\n\n  const handleOk = () => {\n    const id = current._id;\n    dispatch(crud.delete(entity, id));\n  };\n  const handleCancel = () => {\n    if (!isLoading) modal.close();\n  };\n  return (\n    <Modal\n      title={modalTitle}\n      visible={isModalOpen}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      confirmLoading={isLoading}\n    >\n      <p>\n        {deleteMessage}\n        {displayItem}\n      </p>\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport { Spin } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nexport default function Loading({ isLoading, children }) {\n  const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\n  return (\n    <Spin indicator={antIcon} spinning={isLoading}>\n      {children}\n    </Spin>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Row, Col, Button } from \"antd\";\nimport { useSelector } from \"react-redux\";\n\nimport { useCrudContext } from \"@/context/crud\";\nimport { selectCurrentItem } from \"@/redux/crud/selectors\";\nimport { valueByString } from \"@/utils/helpers\";\n\nexport default function ReadItem({ config }) {\n  let { readColumns } = config;\n  const { result: currentResult } = useSelector(selectCurrentItem);\n  const { state } = useCrudContext();\n  const { isReadBoxOpen } = state;\n  const [listState, setListState] = useState([]);\n\n  const isFirstRun = useRef(true);\n  useEffect(() => {\n    console.log(\"currentResult :\", currentResult);\n    console.log(\"readColumns :\", readColumns);\n    if (isFirstRun.current) {\n      isFirstRun.current = false;\n      return;\n    }\n    const list = [];\n    readColumns.map((props) => {\n      const propsKey = props.dataIndex;\n      const propsTitle = props.title;\n      const value = valueByString(currentResult, propsKey);\n      list.push({ propsKey, label: propsTitle, value: value });\n    });\n    setListState(list);\n  }, [currentResult]);\n\n  const show = isReadBoxOpen\n    ? { display: \"block\", opacity: 1 }\n    : { display: \"none\", opacity: 0 };\n\n  const itemsList = listState.map((item) => {\n    return (\n      <Row key={item.propsKey} gutter={12}>\n        <Col className=\"gutter-row\" span={8}>\n          <p>{item.label}</p>\n        </Col>\n        <Col className=\"gutter-row\" span={2}>\n          <p> : </p>\n        </Col>\n        <Col className=\"gutter-row\" span={14}>\n          <p>{item.value}</p>\n        </Col>\n      </Row>\n    );\n  });\n\n  console.log(\"itemsList :\", itemsList);\n  return <div style={show}>{itemsList}</div>;\n}\n","import React, { useEffect, useState, useRef } from \"react\";\n\nimport { AutoComplete, Input } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { request } from \"@/request\";\nimport { useCrudContext } from \"@/context/crud\";\nimport { selectSearchedItems } from \"@/redux/crud/selectors\";\n\nimport { Empty } from \"antd\";\n\nexport default function SearchItem({ config }) {\n  let { entity, searchConfig } = config;\n\n  const { displayLabels, searchFields, outputValue = \"_id\" } = searchConfig;\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\"\");\n  const [options, setOptions] = useState([]);\n\n  const { crudContextAction } = useCrudContext();\n  const { panel, collapsedBox, readBox } = crudContextAction;\n\n  let source = request.source();\n  const { result, isLoading, isSuccess } = useSelector(selectSearchedItems);\n\n  const isTyping = useRef(false);\n\n  let delayTimer = null;\n  useEffect(() => {\n    isLoading && setOptions([{ label: \"... Searching\" }]);\n  }, [isLoading]);\n  const onSearch = (searchText) => {\n    isTyping.current = true;\n\n    clearTimeout(delayTimer);\n    delayTimer = setTimeout(function () {\n      if (isTyping.current && searchText !== \"\") {\n        dispatch(\n          crud.search(entity, source, {\n            question: searchText,\n            fields: searchFields,\n          })\n        );\n      }\n      isTyping.current = false;\n    }, 500);\n  };\n\n  const onSelect = (data) => {\n    const currentItem = result.find((item) => {\n      return item[outputValue] === data;\n    });\n\n    dispatch(crud.currentItem(currentItem));\n    panel.open();\n    collapsedBox.open();\n    readBox.open();\n  };\n\n  const onChange = (data) => {\n    const currentItem = options.find((item) => {\n      return item.value === data;\n    });\n    const currentValue = currentItem ? currentItem.label : data;\n    setValue(currentValue);\n  };\n\n  useEffect(() => {\n    let optionResults = [];\n\n    result.map((item) => {\n      const labels = displayLabels.map((x) => item[x]).join(\" \");\n      optionResults.push({ label: labels, value: item[outputValue] });\n    });\n\n    setOptions(optionResults);\n  }, [result]);\n\n  return (\n    <AutoComplete\n      value={value}\n      options={options}\n      style={{\n        width: \"100%\",\n      }}\n      onSelect={onSelect}\n      onSearch={onSearch}\n      onChange={onChange}\n      notFoundContent={!isSuccess ? <Empty /> : \"\"}\n      allowClear={true}\n      placeholder=\"Your Search here\"\n    >\n      <Input suffix={<SearchOutlined />} />\n    </AutoComplete>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport dayjs from \"dayjs\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crud } from \"@/redux/crud/actions\";\nimport { useCrudContext } from \"@/context/crud\";\nimport { selectUpdatedItem } from \"@/redux/crud/selectors\";\n\nimport { Button, Form } from \"antd\";\nimport Loading from \"@/components/Loading\";\n\nexport default function UpdateForm({ config, formElements }) {\n  let { entity } = config;\n  const dispatch = useDispatch();\n  const { current, isLoading, isSuccess } = useSelector(selectUpdatedItem);\n\n  const { state, crudContextAction } = useCrudContext();\n  const { panel, collapsedBox, readBox } = crudContextAction;\n\n  const [form] = Form.useForm();\n\n  const onSubmit = (fieldsValue) => {\n    if (fieldsValue) {\n      if (fieldsValue.birthday) {\n        fieldsValue = {\n          ...fieldsValue,\n          birthday: fieldsValue[\"birthday\"].format(\"DD/MM/YYYY\"),\n        };\n      }\n      if (fieldsValue.date) {\n        fieldsValue = {\n          ...fieldsValue,\n          birthday: fieldsValue[\"date\"].format(\"DD/MM/YYYY\"),\n        };\n      }\n    }\n\n    const id = current._id;\n    dispatch(crud.update(entity, id, fieldsValue));\n  };\n  useEffect(() => {\n    if (current) {\n      if (current.birthday) {\n        current.birthday = dayjs(current.birthday);\n      }\n      if (current.date) {\n        current.date = dayjs(current.date);\n      }\n      form.setFieldsValue(current);\n    }\n  }, [current]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      readBox.open();\n      collapsedBox.open();\n      panel.open();\n      form.resetFields();\n      dispatch(crud.resetAction(\"update\"));\n      dispatch(crud.list(entity));\n    }\n  }, [isSuccess]);\n\n  const { isEditBoxOpen } = state;\n\n  const show = isEditBoxOpen\n    ? { display: \"block\", opacity: 1 }\n    : { display: \"none\", opacity: 0 };\n  return (\n    <div style={show}>\n      <Loading isLoading={isLoading}>\n        <Form form={form} layout=\"vertical\" onFinish={onSubmit}>\n          {formElements}\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </Loading>\n    </div>\n  );\n}\n","import * as actionTypes from \"./types\";\nimport { request } from \"@/request\";\n\nexport const crud = {\n  resetState: () => async (dispatch) => {\n    dispatch({\n      type: actionTypes.RESET_STATE,\n    });\n  },\n  resetAction: (actionType) => async (dispatch) => {\n    dispatch({\n      type: actionTypes.RESET_ACTION,\n      keyState: actionType,\n      payload: null,\n    });\n  },\n  currentItem: (data) => async (dispatch) => {\n    dispatch({\n      type: actionTypes.CURRENT_ITEM,\n      payload: { ...data },\n    });\n  },\n  currentAction: (actionType, data) => async (dispatch) => {\n    dispatch({\n      type: actionTypes.CURRENT_ACTION,\n      keyState: actionType,\n      payload: { ...data },\n    });\n  },\n  list: (entity, currentPage = 1) => async (dispatch) => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"list\",\n      payload: null,\n    });\n\n    let data = await request.list(entity, { page: currentPage });\n\n    if (data.success === true) {\n      const result = {\n        items: data.result,\n        pagination: {\n          current: parseInt(data.pagination.page, 10),\n          pageSize: 10,\n          total: parseInt(data.pagination.count, 10),\n        },\n      };\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"list\",\n        payload: result,\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"list\",\n        payload: null,\n      });\n    }\n  },\n  create: (entity, jsonData) => async (dispatch) => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"create\",\n      payload: null,\n    });\n    console.log(\"jsonData action redux\", jsonData);\n    let data = await request.create(entity, jsonData);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"create\",\n        payload: data.result,\n      });\n\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.result,\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"create\",\n        payload: null,\n      });\n    }\n  },\n  read: (entity, itemId) => async (dispatch) => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"read\",\n      payload: null,\n    });\n\n    let data = await request.read(entity, itemId);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.result,\n      });\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"read\",\n        payload: data.result,\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"read\",\n        payload: null,\n      });\n    }\n  },\n  update: (entity, itemId, jsonData) => async (dispatch) => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"update\",\n      payload: null,\n    });\n\n    let data = await request.update(entity, itemId, jsonData);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"update\",\n        payload: data.result,\n      });\n      dispatch({\n        type: actionTypes.CURRENT_ITEM,\n        payload: data.result,\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"update\",\n        payload: null,\n      });\n    }\n  },\n\n  delete: (entity, itemId) => async (dispatch) => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"delete\",\n      payload: null,\n    });\n\n    let data = await request.delete(entity, itemId);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"delete\",\n        payload: data.result,\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"delete\",\n        payload: null,\n      });\n    }\n  },\n\n  search: (entity, source, option) => async (dispatch) => {\n    dispatch({\n      type: actionTypes.REQUEST_LOADING,\n      keyState: \"search\",\n      payload: null,\n    });\n\n    source.cancel();\n\n    source = request.source();\n    let data = await request.search(entity, source, option);\n\n    if (data.success === true) {\n      dispatch({\n        type: actionTypes.REQUEST_SUCCESS,\n        keyState: \"search\",\n        payload: data.result,\n      });\n    } else {\n      dispatch({\n        type: actionTypes.REQUEST_FAILED,\n        keyState: \"search\",\n        payload: null,\n      });\n    }\n  },\n};\n","import { createSelector } from \"reselect\";\n\nconst selectCrud = (state) => state.crud;\n\nexport const selectCurrentItem = createSelector(\n  [selectCrud],\n  (crud) => crud.current\n);\n\nexport const selectListItems = createSelector(\n  [selectCrud],\n  (crud) => crud.list\n);\nexport const selectItemById = (itemId) =>\n  createSelector(selectListItems, (list) =>\n    list.result.items.find((item) => item._id === itemId)\n  );\n\nexport const selectCreatedItem = createSelector(\n  [selectCrud],\n  (crud) => crud.create\n);\n\nexport const selectUpdatedItem = createSelector(\n  [selectCrud],\n  (crud) => crud.update\n);\n\nexport const selectReadItem = createSelector([selectCrud], (crud) => crud.read);\n\nexport const selectDeletedItem = createSelector(\n  [selectCrud],\n  (crud) => crud.delete\n);\n\nexport const selectSearchedItems = createSelector(\n  [selectCrud],\n  (crud) => crud.search\n);\n","import { parse } from \"querystring\";\nfunction getPageQuery() {\n  parse(window.location.href.split(\"?\")[1]);\n}\n\n/* \n To get nested object properties.\n admin = {\n    location: {\n        lat: 50,\n        long: 9\n    }\n }\n\n get(admin, 'location.lat')     // 50\n get(admin, 'location.foo.bar') // undefined\n*/\n\nexport function get(obj, key) {\n  return key.split(\".\").reduce(function (o, x) {\n    return o === undefined || o === null ? o : o[x];\n  }, obj);\n\n  // key.split('.').reduce(function(o, x) {\n  //     return (o === undefined || o === null) ? o : o[x];\n  //   }, obj);\n}\n\nObject.byString = function (o, s) {\n  s = s.replace(/\\[(\\w+)\\]/g, \".$1\"); // convert indexes to properties\n  s = s.replace(/^\\./, \"\"); // strip a leading dot\n  let a = s.split(\".\");\n  for (let i = 0, n = a.length; i < n; ++i) {\n    let k = a[i];\n    if (o !== null) {\n      if (k in o) {\n        o = o[k];\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n  }\n  return o;\n};\n\n/* \n To check only if a property exists, without getting its value. It similer get function.\n*/\nexport function has(obj, key) {\n  return key.split(\".\").every(function (x) {\n    if (typeof obj !== \"object\" || obj === null || x in obj === false)\n      /// !x in obj or  x in obj === true *** if you find any bug\n      return false;\n    obj = obj[x];\n    return true;\n  });\n}\n\n/* \n convert indexes to properties\n*/\nexport function valueByString(obj, string, devider) {\n  if (devider === undefined) {\n    devider = \"|\";\n  }\n  return string\n    .split(devider)\n    .map(function (key) {\n      return get(obj, key);\n    })\n    .join(\" \");\n}\n\n/*\n Submit multi-part form using ajax.\n*/\nexport function toFormData(form) {\n  let formData = new FormData();\n  const elements = form.querySelectorAll(\"input, select, textarea\");\n  for (let i = 0; i < elements.length; ++i) {\n    const element = elements[i];\n    const name = element.name;\n\n    if (name && element.dataset.disabled !== \"true\") {\n      if (element.type === \"file\") {\n        const file = element.files[0];\n        formData.append(name, file);\n      } else {\n        const value = element.value;\n        if (value && value.trim()) {\n          formData.append(name, value);\n        }\n      }\n    }\n  }\n\n  return formData;\n}\n\n/*\n Format Date to display admin\n*/\nexport function formatDate(param) {\n  const date = new Date(param);\n  let day = date.getDate().toString();\n  let month = (date.getMonth() + 1).toString();\n  const year = date.getFullYear();\n  if (month.length < 2) month = `0${month}`;\n  if (day.length < 2) day = `0${day}`;\n  const fullDate = `${day}/${month}/${year}`;\n  return fullDate;\n}\n\n/*\n Format Datetime to display admin\n*/\nexport function formatDatetime(param) {\n  let time = new Date(param).toLocaleTimeString();\n  return formatDate(param) + \" \" + time;\n}\n\n/*\n Set object value in html\n*/\nexport function bindValue(obj, parentElement) {\n  parentElement.querySelectorAll(\"[data-property]\").forEach((element) => {\n    const type = element.dataset.type;\n    let value = valueByString(obj, element.dataset.property);\n    console.log({ type });\n    switch (type) {\n      case \"date\":\n        value = formatDate(value);\n        break;\n\n      case \"datetime\":\n        value = formatDatetime(value);\n        break;\n\n      case \"currency\":\n        value = value.toFixed(2).replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\");\n        break;\n\n      default:\n        break;\n    }\n    element.innerHTML = value;\n  });\n}\n\nexport default getPageQuery;\n"],"names":["CreateForm","config","formElements","entity","dispatch","useDispatch","useSelector","selectCreatedItem","isLoading","isSuccess","crudContextAction","useCrudContext","panel","collapsedBox","readBox","Form","form","useEffect","open","resetFields","crud","layout","onFinish","fieldsValue","birthday","format","date","type","htmlType","DeleteModal","entityDisplayLabels","deleteMessage","modalTitle","selectDeletedItem","current","state","isModalOpen","modal","useState","displayItem","setDisplayItem","close","labels","map","x","valueByString","join","title","visible","onOk","id","_id","onCancel","confirmLoading","Loading","children","antIcon","style","fontSize","spin","indicator","spinning","ReadItem","readColumns","currentResult","selectCurrentItem","result","isReadBoxOpen","listState","setListState","isFirstRun","useRef","console","log","list","props","propsKey","dataIndex","propsTitle","value","push","label","show","display","opacity","itemsList","item","gutter","className","span","SearchItem","searchConfig","displayLabels","searchFields","outputValue","setValue","options","setOptions","source","request","selectSearchedItems","isTyping","delayTimer","optionResults","width","onSelect","data","currentItem","find","onSearch","searchText","clearTimeout","setTimeout","question","fields","onChange","currentValue","notFoundContent","allowClear","placeholder","suffix","UpdateForm","selectUpdatedItem","dayjs","setFieldsValue","isEditBoxOpen","resetState","actionTypes","resetAction","actionType","keyState","payload","currentAction","currentPage","page","success","items","pagination","parseInt","pageSize","total","count","create","jsonData","read","itemId","update","delete","search","option","cancel","selectCrud","createSelector","selectListItems","selectItemById","obj","string","devider","undefined","split","key","reduce","o","get","Object","byString","s","a","replace","i","n","length","k"],"sourceRoot":""}